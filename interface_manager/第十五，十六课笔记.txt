1.统一的数据检验 form
    1.1 进行一个字典的检验
       user = {'username': xxx,  'password': pppppp}
	1.2 form数据校验是跟model的数据字典统一
	1.3 form跟一个model相关
	
	1.4 使用规则： 1.实例化，传入字典 2.执行is_valid()函数，触发校验规则 3.form.errors可以拿到错误原因
2.把接口做成class形式
	1.定义一个class, 继承于from django.views.generic import View，定义各种方法
	2. 进行url注册 path('temp/', user_views.UserViews.as_view())
	
	rest 处理原则
		get 获取数据
		post 创建数据
		put  修改数据
		delete 删除数据
		patch  部分修改数据
	
3.统一的异常处理
	1.django中间件：所有的请求的公共入口， 所有的请求都是先经过中间件，再到我们具体views的代码
	  一个request请求： 
	  浏览器request---> 中间件（process_request）  --> views 
	  ---> response（process_response） ---> 中间件 ---> 浏览器response
	  
	
	2.def process_exception(self, request, exception): 会捕捉所有的异常
	  只要出现异常，我们就返回success=false
	  
	只有没捕获异常 才会被全局捕获
	  
4.统一的日志处理